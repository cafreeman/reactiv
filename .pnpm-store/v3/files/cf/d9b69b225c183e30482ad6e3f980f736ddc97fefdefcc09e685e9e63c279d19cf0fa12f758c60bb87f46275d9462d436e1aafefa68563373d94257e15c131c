export type Fetch = typeof fetch;
export type NormalizedFetch = (request: Request) => Promise<Response>;
export type Middleware = (
/**
 * Request object to be manipulated by middleware
 */
request: Request, 
/**
 * localized fetch used when all middlewares are done with manipulating Request
 */
next: NormalizedFetch) => Promise<Response>;
export interface BuildFetchOptions {
    /**
     * Whether to force earlier built fetches to error making the most recent //
     * invokation the authoritive fetch. You will typically only want to set this to
     * false for testing. Defaults to true.
     */
    disablePrior?: boolean;
    /**
     * What message to throw if a user tries to invoke a disabled fetch. Useful
     * to help users know where to import fetch from rather than build it //
     * themselves.
     */
    disableMessage?: string;
    /**
     * override the default fetch implementation
     */
    fetch: Fetch;
}
/**
 *
 * @param middlewares {Middleware[]} array of middlewares
 * @param options {BuildFetchOptions=} optional options for overriding buildFetch configuration
 * @returns Fetch
 */
export declare function buildFetch(middlewares: Middleware[], options?: BuildFetchOptions): Fetch;
//# sourceMappingURL=fetch.d.ts.map